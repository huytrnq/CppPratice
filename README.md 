<h1>C++</h1>

# Table of Contents
1. [Object Oriented Programming](#obb)
2. [Overloading](#overloading)
3. [Inheritance](#inheritance)


## Object Oriented Programming
- Include guard: To prevent the header file from being included more than once in the same file.
- Constructor overloading: A class can have more than one constructor.
- Copy constructor: A constructor that creates an object by copying variables from another object.
- Destructor: A special member function that is called when the object goes out of scope or is deleted.
- Constructor initializer list: A list of initializations for member objects.
- Copy constructor: 
    + A constructor that creates an object by copying variables from another object.
    + If a class does not have a copy constructor, the compiler will create one.
    + If a class has a pointer to memory, the default copy constructor will copy the pointer, not the memory.
- Shwallow copy vs Deep copy:
    + Shallow copy: Only the pointer is copied, not the memory.
    + Deep copy: The memory is copied.
- Move Constructor: A constructor that moves the memory from one object to another.
    + The copy constructor is called when the object is passed by value.
    + The move constructor is called when the object is passed by rvalue reference.
    + The move constructor helps to avoid unnecessary copying of memory.
- Const Class
    + A const class can only call const member functions which have the const keyword at the end of the function declaration.
    + A const member function cannot modify the object.
    + A const member function can only call other const member functions.
- Static Class Members: class-wise variables that are shared among all objects of the class.
    + Static functions can only access static members.
    + Define static members outside the class in the source file.
- Struct vs Class
    + The only difference between a struct and a class is that members of a struct are public by default, while members of a class are private
- Friend Class: A class that can access the private members of another class.


## Overloading
- Constructor overloading:
    + Copy constructor: A constructor that creates an object by copying variables from another object.
    + If a class does not have a copy constructor, the compiler will create one with shallow copy.
    + If your class has a raw pointer, you should define a copy constructor to perform a deep copy.
    + Syntax: Type &Type::operator=(const Type &rhs) { ... }


## Inheritance
- Inheritance: A class can inherit from another class.
- Generalization vs Specialization
    + Generalization: A class that is more general than another class.
    + Specialization: A class that is more specific than another class.
    + A ==> B ==> C ==> D 

      <================== Generalization

      ==================> Specialization
- Inheritance vs Composition
    + Inheritance: A class inherits from another class.
    + Composition: A class has a member object of another class.
- Protected and Private Inheritance
    + Protected Inheritance: The public and protected members of the base class become protected members of the derived class.
    + Private Inheritance: The public and protected members of the base class become private members of the derived class.

# Cmake
- Include Inheritance
    + PUBLIC: All the directories following PUBLIC will be used for the current target and the other targets that have dependencies on the current target, i.e., appending the directories to INCLUDE_DIRECTORIES and INTERFACE_INCLUDE_DIRECTORIES.
    + PRIVATE: All the directories following PRIVATE will be used for the current target only, i.e., appending the directories to INCLUDE_DIRECTORIES.
    + INTERFACE: All the directories following INTERFACE will be used for the other targets that have dependencies on the current target, i.e., appending the directories to INTERFACE_INCLUDE_DIRECTORIES.
- Link Inheritance
    + PUBLIC: All the objects following PUBLIC will be used for linking to the current target and providing the interface to the other targets that have dependencies on the current target.
    + PRIVATE: All the objects following PRIVATE will be used for linking to the current target only.
    + INTERFACE: All the objects following INTERFACE will be used for providing the interface to the other targets that have dependencies on the current target.

# Static vs Dynamic Libraries
- Static libraries are linked to the executable at compile time.
- Dynamic libraries are linked to the executable at run time.
- Dynamic libraries are loaded into memory when the program starts and are shared among all the processes that use the library. May have worse performance than static libraries.
